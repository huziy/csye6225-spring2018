{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "ApplicationStack",
	"Resources": {
		"LaunchConfig": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Properties": {
				"AssociatePublicIpAddress": "true",
				"IamInstanceProfile": "ec2profile",
				"ImageId": {
					"Ref": "ImageId"
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"KeyName": "liujunyu",
				"SecurityGroups": [{
					"Ref": "WebPolicy"
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"", [
								"#!/bin/bash -xe\n",
								"sudo apt-get update\n",
								"sudo apt-get install openjdk-8-jdk -y\n",
								"sudo apt-get install ruby -y\n",
								"sudo apt-get install wget -y\n",
								"sudo apt-get install python -y\n",
								"sudo apt-get update\n",
								"sudo wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install\n",
								"sudo chmod +x ./install\n",
								"sudo ./install auto\n",
								"sudo service codedeploy-agent start\n",
								"sudo apt-get install tomcat8 -y\n",
								"sudo mkdir /var/tempimage\n",
								"sudo chown -R tomcat8 /var/tempimage\n",
								"sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -Dspring.datasource.username=csye6225master -Dspring.datasource.password=csye6225password  -Dspring.profiles.active=aws\\\"\" >> /etc/default/tomcat8\n",
								{
									"Fn::Join": [
										"", [
											"echo 'JAVA_OPTS=\"${JAVA_OPTS} -Dspring.datasource.url=\\\"jdbc:mysql://",
											{
												"Fn::GetAtt": [
													"MyDB",
													"Endpoint.Address"
												]
											},
											":3306/csye6225\\\"\"' >> /etc/default/tomcat8\n"
										]
									]
								},
								"sudo service tomcat8 restart\n",
								"sudo apt-get update\n",
								"sudo touch /tmp/awslogs.conf\n",
								"sudo echo '[general]' > /tmp/awslogs.conf\n",
								"sudo echo 'state_file= /var/awslogs/agent-state' >> /tmp/awslogs.conf\n",
								"sudo echo '[logstream1]' >> /tmp/awslogs.conf\n",
								"sudo echo 'file = /var/log/tomcat8/csye6225-aws.log' >> /tmp/awslogs.conf\n",
								"sudo echo 'log_group_name = csye6225-webapp' >> /tmp/awslogs.conf\n",
								"sudo echo 'log_stream_name = csye6225-webapp' >> /tmp/awslogs.conf\n",
								"sudo echo 'datetime_format = %d/%b/%Y:%H:%M:%S' >> /tmp/awslogs.conf\n",
								"curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O\n",
								{
									"Fn::Join": [
										" ", [
											"sudo python ./awslogs-agent-setup.py -n -r",
											{
												"Ref": "AWS::Region"
											},
											"-c /tmp/awslogs.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n"
										]
									]
								},
								"cd /etc/systemd/system\n",
								"sudo touch awslogs.service\n",
								"sudo echo '[Unit]' >> awslogs.service\n",
								"sudo echo 'Description=Service for CloudWatch Logs agent' >> awslogs.service\n",
								"sudo echo 'After=rc-local.service' >> awslogs.service\n",
								"sudo echo '[Service]' >> awslogs.service\n",
								"sudo echo 'Type=simple' >> awslogs.service\n",
								"sudo echo 'Restart=always' >> awslogs.service\n",
								"sudo echo 'KillMode=process' >> awslogs.service\n",
								"sudo echo 'TimeoutSec=infinity' >> awslogs.service\n",
								"sudo echo 'PIDFile=/var/awslogs/state/awslogs.pid' >> awslogs.service\n",
								"sudo echo 'ExecStart=/var/awslogs/bin/awslogs-agent-launcher.sh --start --background --pidfile $PIDFILE --user awslogs --chuid awslogs &amp;' >> awslogs.service\n",
								"sudo echo '[Install]' >> awslogs.service\n",
								"sudo echo 'WantedBy=multi-user.target' >> awslogs.service\n",
								"sudo systemctl start awslogs.service\n",
								"sudo systemctl enable awslogs.service\n"
							]
						]
					}
				}
			}
		},

		"InstanceAutoScalinGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				"Cooldown": {
					"Ref": "CoolDown"
				},
				"DesiredCapacity": {
					"Ref": "DesiredCapacity"
				},
				"LaunchConfigurationName": {
					"Ref": "LaunchConfig"
				},
				"MaxSize": {
					"Ref": "MaxSize"
				},
				"MinSize": {
					"Ref": "MinSize"
				},
				"TargetGroupARNs": [{
					"Ref": "HttpTargetGroup"
				}],
				"VPCZoneIdentifier": [{
						"Ref": "Subnet1"
					},
					{
						"Ref": "Subnet2"
					},
					{
						"Ref": "Subnet3"
					}
				],
				"Tags": [{
					"Key": "deploy",
					"Value": "deploy",
					"PropagateAtLaunch": "true"
				}]
			}
		},

		"WebServerScaleUpPolicy": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "InstanceAutoScalinGroup"
				},
				"Cooldown": {
					"Ref": "CoolDown"
				},
				"ScalingAdjustment": "1"
			}
		},

		"WebServerScaleDownPolicy": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "InstanceAutoScalinGroup"
				},
				"Cooldown": {
					"Ref": "CoolDown"
				},
				"ScalingAdjustment": "-1"
			}
		},

		"CPUAlarmHigh": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
				"MetricName": "CPUUtilization",
				"Namespace": "AWS/EC2",
				"Statistic": "Average",
				"Period": "300",
				"EvaluationPeriods": "2",
				"Threshold": "90",
				"AlarmActions": [{
					"Ref": "WebServerScaleUpPolicy"
				}],
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "InstanceAutoScalinGroup"
					}
				}],
				"ComparisonOperator": "GreaterThanThreshold"
			}
		},

		"CPUAlarmLow": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
				"MetricName": "CPUUtilization",
				"Namespace": "AWS/EC2",
				"Statistic": "Average",
				"Period": "300",
				"EvaluationPeriods": "2",
				"Threshold": "70",
				"AlarmActions": [{
					"Ref": "WebServerScaleDownPolicy"
				}],
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "InstanceAutoScalinGroup"
					}
				}],
				"ComparisonOperator": "LessThanThreshold"
			}
		},

		"loadBalancer": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties": {
				"Scheme": "internet-facing",
				"SecurityGroups": [{
					"Ref": "LoadBalancerPolicy"
				}],
				"Subnets": [{
						"Ref": "Subnet1"
					},
					{
						"Ref": "Subnet2"
					},
					{
						"Ref": "Subnet3"
					}
				],
				"Tags": [{
					"Key": "loadbalancer",
					"Value": "loadbalancer"
				}]
			}
		},

		"ListenerToTarget": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": {
						"Ref": "HttpTargetGroup"
					}
				}],
				"LoadBalancerArn": {
					"Ref": "loadBalancer"
				},
				"Port": "443",
				"Protocol": "HTTPS",
				"Certificates": [{
					"CertificateArn": "arn:aws:acm:us-east-1:580863620382:certificate/befea903-9085-447f-8331-57d695d9d7b7"
				}]
			}
		},

		"HttpTargetGroup": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"Name": "httptest",
				"Port": "8080",
				"Protocol": "HTTP",
				"VpcId": {
					"Ref": "VpcId"
				}
			}
		},

		"Route53Domain": {
			"Type": "AWS::Route53::RecordSet",
			"Properties": {
				"AliasTarget": {
					"DNSName": {
						"Fn::GetAtt": ["loadBalancer", "DNSName"]
					},
					"HostedZoneId": {
						"Fn::GetAtt": ["loadBalancer", "CanonicalHostedZoneID"]
					}
				},
				"Name": {
					"Ref": "DomainName"
				},
				"HostedZoneName": {
					"Ref": "DomainName"
				},
				"Type": "A"
			}
		},

		"myDynamoDBTable": {
			"Type": "AWS::DynamoDB::Table",
			"Properties": {
				"AttributeDefinitions": [{
					"AttributeName": "id",
					"AttributeType": "S"
				}],
				"KeySchema": [{
					"AttributeName": "id",
					"KeyType": "HASH"
				}],
				"ProvisionedThroughput": {
					"ReadCapacityUnits": "5",
					"WriteCapacityUnits": "5"
				},
				"TableName": "csye6225",
				"TimeToLiveSpecification": {
					"AttributeName": "ttl",
					"Enabled": "true"
				}
			}
		},
		"RecordServiceS3Bucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": {
					"Ref": "S3BucketName"
				}
			}
		},

		"MyDB": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"DBName": "csye6225",
				"Engine": "MySQL",
				"EngineVersion": {
					"Ref": "EngineVersion"
				},
				"DBInstanceClass": {
					"Ref": "DBInstanceClass"
				},
				"MultiAZ": "false",
				"DBInstanceIdentifier": "csye6225-spring2018",
				"MasterUsername": {
					"Ref": "MasterUsername"
				},
				"MasterUserPassword": {
					"Ref": "MasterUserPassword"
				},
				"DBSubnetGroupName": {
					"Ref": "DBSubnetGroup"
				},
				"VPCSecurityGroups": [{
					"Ref": "DBPolicy"
				}],
				"PubliclyAccessible": "false",
				"Tags": [{
					"Key": "Name",
					"Value": "csye6225"
				}],
				"AllocatedStorage": "10"
			}
		},
		"MySNSTopic": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"Subscription": [{
					"Endpoint": {
						"Ref": "awslambdaservice"
					},
					"Protocol": "lambda"
				}],
				"TopicName": "password_reset"
			}
		}

	},
	"Parameters": {
		"InstanceName": {
			"Type": "String"
		},
		"SubnetId": {
			"Type": "String"
		},
		"WebPolicy": {
			"Type": "String"
		},
		"DBPolicy": {
			"Type": "String"
		},
		"DBSubnetGroup": {
			"Type": "String"
		},
		"awslambdaservice": {
			"Type": "String"
		},
		"Subnet1": {
			"Type": "String"
		},
		"Subnet2": {
			"Type": "String"
		},
		"Subnet3": {
			"Type": "String"
		},
		"LoadBalancerPolicy": {
			"Type": "String"
		},
		"VpcId": {
			"Type": "String"
		},
		"ImageId": {
			"Type": "String"
		},
		"InstanceType": {
			"Type": "String"
		},
		"CoolDown": {
			"Type": "String"
		},
		"MinSize": {
			"Type": "String"
		},
		"MaxSize": {
			"Type": "String"
		},
		"DesiredCapacity": {
			"Type": "String"
		},
		"DomainName": {
			"Type": "String"
		},
		"EngineVersion": {
			"Type": "String"
		},
		"DBInstanceClass": {
			"Type": "String"
		},
		"MasterUsername": {
			"Type": "String"
		},
		"MasterUserPassword": {
			"Type": "String"
		},
		"S3BucketName": {
			"Type": "String"
		}
	}
}
